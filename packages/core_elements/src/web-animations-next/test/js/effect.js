function leftAsNumber(e){var t=getComputedStyle(e).left;return Number(t.substring(0,t.length-2))}suite("effect",function(){test("Normalize keyframes with all offsets specified but not sorted by offset. Some offsets are out of [0, 1] range.",function(){var e;assert.throws(function(){e=normalizeKeyframes([{offset:0},{offset:-1},{offset:1},{offset:.5},{offset:2}])})}),test("Normalize keyframes with some offsets not specified, and not sorted by offset.",function(){assert.throws(function(){normalizeKeyframes([{offset:.5},{offset:0},{offset:.8},{},{offset:1}])})}),test("Normalize keyframes with some offsets not specified, and not sorted by offset. Out of order keyframes are out of [0, 1] range.",function(){assert.throws(function(){normalizeKeyframes([{offset:0},{offset:-1},{offset:.5},{},{offset:1}])})}),test("Normalize keyframes with some offsets not specified, but sorted by offset where specified. Some offsets are out of [0, 1] range.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{offset:-1},{offset:0},{offset:.5},{},{},{offset:2}])}),assert.equal(e.length,4),assert.closeTo(e[0].offset,0,.001),assert.closeTo(e[1].offset,.5,.001),assert.closeTo(e[2].offset,.75,.001),assert.closeTo(e[3].offset,1,.001)}),test("Normalize keyframes with some offsets not specified, but sorted by offset where specified. All specified offsets in [0, 1] range.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{left:"0px",offset:0},{left:"10px"},{left:"20px"},{left:"30px",offset:.6},{left:"40px"},{left:"50px"}])}),assert.equal(e.length,6),assert.closeTo(e[0].offset,0,.001),assert.equal(e[0].left,"0px"),assert.closeTo(e[1].offset,.2,.001),assert.equal(e[1].left,"10px"),assert.closeTo(e[2].offset,.4,.001),assert.equal(e[2].left,"20px"),assert.closeTo(e[3].offset,.6,.001),assert.equal(e[3].left,"30px"),assert.closeTo(e[4].offset,.8,.001),assert.equal(e[4].left,"40px"),assert.closeTo(e[5].offset,1,.001),assert.equal(e[5].left,"50px")}),test("Normalize keyframes with no offsets specified.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{left:"0px"},{left:"10px"},{left:"20px"},{left:"30px"},{left:"40px"}])}),assert.equal(e.length,5),assert.closeTo(e[0].offset,0,.001),assert.equal(e[0].left,"0px"),assert.closeTo(e[1].offset,.25,.001),assert.equal(e[1].left,"10px"),assert.closeTo(e[2].offset,.5,.001),assert.equal(e[2].left,"20px"),assert.closeTo(e[3].offset,.75,.001),assert.equal(e[3].left,"30px"),assert.closeTo(e[4].offset,1,.001),assert.equal(e[4].left,"40px")}),test("Normalize keyframes where a keyframe has an offset that is not a number.",function(){assert.throws(function(){normalizeKeyframes([{offset:0},{offset:"one"},{offset:1}])})}),test("Normalize keyframes where a keyframe has an offset that is a numeric string.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{offset:0},{offset:"0.5"},{offset:1}])}),assert.equal(e.length,3),assert.closeTo(e[0].offset,0,.001),assert.closeTo(e[1].offset,.5,.001),assert.closeTo(e[2].offset,1,.001)}),test("Normalize keyframes where some keyframes have easings.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{left:"0px",easing:"ease-in"},{left:"10px"},{left:"0px"}])})}),test("Normalize keyframes with invalid specified easing.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{left:"0px",easing:"easy-peasy"},{left:"10px"},{left:"0px"}])}),assert.equal(""+e[0].easing,"function (x) { return x; }")}),test("Normalize keyframes where some properties are given non-string, non-number values.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{left:{}},{left:"100px"},{left:[]}])}),assert(e.length,3),assert.equal(e[0].left,"[object Object]"),assert.equal(e[1].left,"100px"),assert.equal(e[2].left,"")}),test("Normalize input that is not an array.",function(){assert.throws(function(){normalizeKeyframes(10)})}),test("Normalize an empty array.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([])}),assert.deepEqual(e,[])}),test("Normalize null.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes(null)}),assert.deepEqual(e,[])}),test("Normalize shorthands.",function(){var e;assert.doesNotThrow(function(){e=normalizeKeyframes([{borderColor:"purple green orange blue"},{borderColor:"red"}])}),assert.equal(e[0].borderTopColor,"purple"),assert.equal(e[0].borderRightColor,"green"),assert.equal(e[0].borderBottomColor,"orange"),assert.equal(e[0].borderLeftColor,"blue"),assert.equal(e[1].borderTopColor,"red"),assert.equal(e[1].borderRightColor,"red"),assert.equal(e[1].borderBottomColor,"red"),assert.equal(e[1].borderLeftColor,"red"),assert.doesNotThrow(function(){e=normalizeKeyframes([{font:"italic bold 20pt / 200% serif"},{font:"italic normal bold 50pt serif"}])}),assert.equal(e[0].fontStyle,"italic"),assert.equal(e[0].fontVariant,"normal"),assert.equal(e[0].fontWeight,"700"),assert.equal(e[0].fontSize,"20pt"),assert.equal(e[0].lineHeight,"200%"),assert.equal(e[0].fontFamily,"serif"),assert.equal(e[1].fontStyle,"italic"),assert.equal(e[1].fontVariant,"normal"),assert.equal(e[1].fontWeight,"700"),assert.equal(e[1].fontSize,"50pt"),assert.equal(e[1].lineHeight,"normal"),assert.equal(e[1].fontFamily,"serif")}),test("Make property specific keyframe groups for a simple effect with one property.",function(){var e;assert.doesNotThrow(function(){e=makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px"},{left:"200px",offset:.3},{left:"0px"}]))}),assert.equal(Object.getOwnPropertyNames(e).length,1),assert.equal(e.left.length,3),assert.closeTo(e.left[0].offset,0,.001),assert.equal(e.left[0].value,"0px"),assert.closeTo(e.left[1].offset,.3,.001),assert.equal(e.left[1].value,"200px"),assert.closeTo(e.left[2].offset,1,.001),assert.equal(e.left[2].value,"0px")}),test("Make property specific keyframe groups for an effect with three properties.",function(){var e;assert.doesNotThrow(function(){e=makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px",top:"200px",opacity:1},{left:"200px",top:"0px"},{left:"0px",top:"200px",opacity:0},{top:"0px",opacity:1},{left:"200px",top:"200px",opacity:0}]))}),assert.equal(Object.getOwnPropertyNames(e).length,3),assert.equal(e.left.length,4),assert.closeTo(e.left[0].offset,0,.001),assert.equal(e.left[0].value,"0px"),assert.closeTo(e.left[1].offset,.25,.001),assert.equal(e.left[1].value,"200px"),assert.closeTo(e.left[2].offset,.5,.001),assert.equal(e.left[2].value,"0px"),assert.closeTo(e.left[3].offset,1,.001),assert.equal(e.left[3].value,"200px"),assert.equal(e.top.length,5),assert.closeTo(e.top[0].offset,0,.001),assert.equal(e.top[0].value,"200px"),assert.closeTo(e.top[1].offset,.25,.001),assert.equal(e.top[1].value,"0px"),assert.closeTo(e.top[2].offset,.5,.001),assert.equal(e.top[2].value,"200px"),assert.closeTo(e.top[3].offset,.75,.001),assert.equal(e.top[3].value,"0px"),assert.closeTo(e.top[4].offset,1,.001),assert.equal(e.top[4].value,"200px"),assert.equal(e.opacity.length,4),assert.closeTo(e.opacity[0].offset,0,.001),assert.equal(e.opacity[0].value,1),assert.closeTo(e.opacity[1].offset,.5,.001),assert.equal(e.opacity[1].value,0),assert.closeTo(e.opacity[2].offset,.75,.001),assert.equal(e.opacity[2].value,1),assert.closeTo(e.opacity[3].offset,1,.001),assert.equal(e.opacity[3].value,0)}),test("Make property specific keyframes when the offset of the last keyframe is specified but not equal to 1.",function(){assert.throws(function(){makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px",offset:0},{left:"20px"},{left:"30px",offset:.9}]))})}),test("Make property specific keyframes when no properties are animated, and the offset of the last keyframe is specified but not equal to 1.",function(){var e;assert.doesNotThrow(function(){e=makePropertySpecificKeyframeGroups(normalizeKeyframes([{offset:0},{},{offset:.9}]))}),assert.equal(Object.getOwnPropertyNames(e).length,0)}),test("Make property specific keyframes when a property appears in some keyframes, but not in the last keyframe.",function(){assert.throws(function(){makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px",top:"0px"},{left:"10px",top:"10px"},{top:"20px"}]))})}),test("Make property specific keyframes when a property appears in some keyframes, but not in the first keyframe.",function(){assert.throws(function(){makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px"},{left:"10px",top:"10px"},{left:"20px",top:"20px"}]))})}),test("Make property specific keyframes where two properties are animated. One property in a keyframe with offset 1. One property in the last keyframe, with no offset.",function(){var e;assert.doesNotThrow(function(){e=makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px",top:"0px",offset:0},{left:"20px",offset:1},{top:"20px"}]))}),assert.equal(Object.getOwnPropertyNames(e).length,2)}),test("Make property specific keyframes where two properties are animated. One property in a keyframe with offset 0. One property in the first keyframe, with no offset.",function(){var e;assert.doesNotThrow(function(){e=makePropertySpecificKeyframeGroups(normalizeKeyframes([{top:"0px"},{left:"0px",offset:0},{left:"20px",top:"20px",offset:1}]))}),assert.equal(Object.getOwnPropertyNames(e).length,2)}),test("Apply keyframe easings.",function(){var e=document.createElement("div"),t=document.createElement("div");e.style.position="absolute",t.style.position="absolute",document.body.appendChild(e),document.body.appendChild(t);e.animate([{left:"0px"},{left:"50px",offset:.25},{left:"0px"}],{duration:4e3,fill:"forwards"}),t.animate([{left:"0px",easing:"ease-in"},{left:"50px",offset:.25},{left:"0px"}],{duration:4e3,fill:"forwards"});tick(0),assert.equal(leftAsNumber(e),0),assert.equal(leftAsNumber(t),0),tick(250),assert.closeTo(leftAsNumber(e),12.5,1),assert.closeTo(leftAsNumber(t),4.65,1),tick(500),assert.closeTo(leftAsNumber(e),25,1),assert.closeTo(leftAsNumber(t),15.25,1),tick(1e3),assert.equal(leftAsNumber(e),50),assert.equal(leftAsNumber(t),50),tick(2500),assert.equal(leftAsNumber(e),25),assert.equal(leftAsNumber(t),25),tick(4e3),assert.equal(leftAsNumber(e),0),assert.equal(leftAsNumber(t),0)}),test("Make interpolations for a simple effect with one property.",function(){var e;assert.doesNotThrow(function(){e=makeInterpolations(makePropertySpecificKeyframeGroups(normalizeKeyframes([{left:"0px"},{left:"200px",offset:.3},{left:"0px"}])))}),assert.equal(e.length,2),assert.closeTo(e[0].startTime,0,.001),assert.closeTo(e[0].endTime,.3,.001),assert.equal(e[0].property,"left"),assert.equal(typeof e[0].interpolation,"function"),assert.closeTo(e[1].startTime,.3,.001),assert.closeTo(e[1].endTime,1,.001),assert.equal(e[1].property,"left"),assert.equal(typeof e[1].interpolation,"function")})}),suite("effect-convertEffectInput",function(){setup(function(){this.target=document.createElement("div"),this.target.style.position="absolute",document.documentElement.appendChild(this.target)}),teardown(function(){this.target.parent&&this.target.removeChild(this.target)}),test("Convert effect input for a simple effect with one property.",function(){var e;assert.doesNotThrow(function(){e=webAnimationsMinifill.convertEffectInput([{left:"0px"},{left:"200px",offset:.3},{left:"100px"}])}),e(this.target,0),assert.closeTo(leftAsNumber(this.target),0,.001),e(this.target,.075),assert.closeTo(leftAsNumber(this.target),50,.001),e(this.target,.15),assert.closeTo(leftAsNumber(this.target),100,.001),e(this.target,.65),assert.closeTo(leftAsNumber(this.target),150,.001),e(this.target,1),assert.closeTo(leftAsNumber(this.target),100,.001),e(this.target,2),assert.closeTo(leftAsNumber(this.target),-42.856,.01)}),test("Convert effect input where one property is animated and the property has two keyframes at offset 1.",function(){var e;assert.doesNotThrow(function(){e=webAnimationsMinifill.convertEffectInput([{left:"0px",offset:0},{left:"20px",offset:1},{left:"30px"}])}),e(this.target,1),assert.equal(getComputedStyle(this.target).left,"30px"),e(this.target,2),assert.equal(getComputedStyle(this.target).left,"30px")}),test("Convert effect input and apply effect at fraction null.",function(){var e,t=getComputedStyle(this.target).left;assert.doesNotThrow(function(){e=webAnimationsMinifill.convertEffectInput([{left:"0px"},{left:"100px"}])}),e(this.target,1),assert.equal(getComputedStyle(this.target).left,"100px"),e(this.target,null),assert.equal(getComputedStyle(this.target).left,t)})});